// Objective: Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

fn main() {
    let mut num1: u128 = 1;
    let mut num2: u128 = 2;
    let mut value: u128;

    let mut i: i32 = 0;
    let limit: i32 = 4000000 + 1;

    let mut result_list: Vec<u128> = Vec::new();

    // While loop
    while i < limit {
        // calculate
        match num1.checked_add(num2) {
            Some(v) => value = v,
            None => {
                println!("Overflow occurred");
                break;
            }
        }
        // push answer to Vec<i32>
        result_list.push(value);
        // Switch num1 & num2
        num1 = num2;
        num2 = value;

        // i++
        i += 1;
    }
    // Print result when done
    println!("{:?}", result_list);
    println!("Last item place {}", i)
}
